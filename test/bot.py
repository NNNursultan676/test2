
import os
import logging
import requests
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ConversationHandler, ContextTypes, filters
from config import BOT_TOKEN, GROUP_ID
from admins import is_admin, add_admin, remove_admin, get_admins_list

# Conversation states
ADD_ADMIN_ID, ADD_ADMIN_LEVEL = range(2)

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def auto_delete_message(context, chat_id, message_id, delay=300):
    """Auto delete message after specified delay (default 5 minutes)"""
    try:
        await asyncio.sleep(delay)
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.info(f"Auto-deleted message {message_id} in chat {chat_id}")
    except Exception as e:
        logger.warning(f"Failed to auto-delete message {message_id}: {e}")

async def check_group_membership(user_id):
    """Check if user is a member of the Telegram group"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getChatMember"
        params = {
            'chat_id': GROUP_ID,
            'user_id': user_id
        }
        response = requests.get(url, params=params, timeout=10)
        data = response.json()
        
        if data.get('ok'):
            status = data.get('result', {}).get('status')
            return status in ['creator', 'administrator', 'member']
        return False
    except Exception as e:
        logger.error(f"Error checking Telegram group membership: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /start command"""
    user = update.effective_user
    user_id = user.id
    first_name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # Check if user is a member of the group
    is_member = await check_group_membership(user_id)
    
    if not is_member:
        access_denied_msg = (
            f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, {first_name}!\n\n"
            f"üîí –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã Sapa Group.\n\n"
            f"üìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        denied_message = await update.message.reply_text(access_denied_msg, parse_mode='HTML')
        
        # Schedule auto-deletion after 5 minutes
        asyncio.create_task(auto_delete_message(
            context, 
            denied_message.chat_id, 
            denied_message.message_id, 
            300  # 5 minutes
        ))
        
        logger.warning(f"Access denied for user {user_id} ({first_name}) - not a group member")
        return
    
    # Check admin level
    admin_level = is_admin(user_id)
    
    # Greeting message for authorized users
    greeting = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!\n\n"
        f"üè¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã—Ö Sapa Group!\n\n"
        f"üì± –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    )
    
    if admin_level > 0:
        level_text = {3: "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 2: "–ê–¥–º–∏–Ω-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä", 1: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"}
        greeting += f"\n\nüëë –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level_text.get(admin_level, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')}"
    
    # Create inline keyboard with Web App button
    webapp_url = f"https://test2-85hz.onrender.com/telegram-auth?telegram_id={user_id}"
    keyboard = [
        [InlineKeyboardButton(
            "üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
            web_app=WebAppInfo(url=webapp_url)
        )],
        [InlineKeyboardButton(
            "üìã –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞", 
            url=webapp_url
        )]
    ]
    
    # Add admin buttons for level 2 and 3 admins
    if admin_level >= 2:
        keyboard.extend([
            [InlineKeyboardButton("üë®‚Äçüíº –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="list_admins")]
        ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    sent_message = await update.message.reply_text(
        greeting,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    
    # Schedule auto-deletion after 5 minutes
    asyncio.create_task(auto_delete_message(
        context, 
        sent_message.chat_id, 
        sent_message.message_id, 
        300  # 5 minutes
    ))
    
    logger.info(f"Access granted for user {user_id} ({first_name}) - group member")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /help command"""
    help_text = (
        "ü§ñ <b>–ë–æ—Ç —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Sapa Group</b>\n\n"
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n\n"
        "üí° <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ /start\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'\n"
        "3. –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é!\n\n"
        "‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    help_message = await update.message.reply_text(help_text, parse_mode='HTML')
    
    # Schedule auto-deletion after 5 minutes
    asyncio.create_task(auto_delete_message(
        context, 
        help_message.chat_id, 
        help_message.message_id, 
        300  # 5 minutes
    ))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle button callbacks"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    admin_level = is_admin(user_id)
    
    if query.data == "add_admin":
        if admin_level >= 2:
            await query.edit_message_text(
                "üë®‚Äçüíº –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")
                ]])
            )
            return ADD_ADMIN_ID
        else:
            await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    elif query.data == "list_admins":
        if admin_level >= 2:
            admins_list = get_admins_list()
            await query.edit_message_text(
                f"üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n{admins_list}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")
                ]])
            )
    
    elif query.data == "cancel_admin" or query.data == "back_to_start":
        await start(update, context)
        return ConversationHandler.END

async def add_admin_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle admin ID input"""
    user_id = update.effective_user.id
    admin_level = is_admin(user_id)
    
    if admin_level < 2:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return ConversationHandler.END
    
    try:
        new_admin_id = int(update.message.text)
        context.user_data['new_admin_id'] = new_admin_id
        
        keyboard = [
            [InlineKeyboardButton("1Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å 1 (–ê–¥–º–∏–Ω)", callback_data="level_1")],
            [InlineKeyboardButton("2Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å 2 (–ê–¥–º–∏–Ω-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä)", callback_data="level_2")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]
        ]
        
        # Level 3 admins can create level 2 admins
        if admin_level >= 3:
            keyboard.insert(-1, [InlineKeyboardButton("3Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å 3 (–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)", callback_data="level_3")])
        
        await update.message.reply_text(
            f"üîπ ID: {new_admin_id}\n\n"
            "üéöÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADD_ADMIN_LEVEL
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")
            ]])
        )
        return ADD_ADMIN_ID

async def add_admin_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle admin level selection"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    admin_level = is_admin(user_id)
    new_admin_id = context.user_data.get('new_admin_id')
    
    if not new_admin_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ConversationHandler.END
    
    level_map = {"level_1": 1, "level_2": 2, "level_3": 3}
    selected_level = level_map.get(query.data, 1)
    
    success, message = add_admin(new_admin_id, selected_level, user_id)
    
    if success:
        level_text = {3: "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω", 2: "–ê–¥–º–∏–Ω-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä", 1: "–ê–¥–º–∏–Ω"}
        await query.edit_message_text(
            f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üë§ ID: {new_admin_id}\n"
            f"üîπ –£—Ä–æ–≤–µ–Ω—å: {level_text.get(selected_level)}"
        )
    else:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {message}")
    
    return ConversationHandler.END

def main() -> None:
    """Start the bot"""
    # Create the Application
    application = Application.builder().token(BOT_TOKEN).build()

    # Add conversation handler for admin management
    admin_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern="^add_admin$")],
        states={
            ADD_ADMIN_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_admin_id)],
            ADD_ADMIN_LEVEL: [CallbackQueryHandler(add_admin_level, pattern="^level_[123]$")]
        },
        fallbacks=[
            CallbackQueryHandler(button_handler, pattern="^cancel_admin$"),
            CommandHandler("start", start)
        ]
    )

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(admin_conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))

    # Log bot startup
    logger.info("Starting Sapa Room Booking Bot...")

    # Run the bot until the user presses Ctrl-C
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
